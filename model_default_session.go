/*
Ory Hydra API

Documentation for all of Ory Hydra's APIs.

API version:
Contact: hi@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// DefaultSession IDTokenSession is a session container for the id token
type DefaultSession struct {
	ExpiresAt     *map[string]time.Time `json:"expires_at,omitempty"`
	Headers       *Headers              `json:"headers,omitempty"`
	IdTokenClaims *IDTokenClaims        `json:"id_token_claims,omitempty"`
	Subject       *string               `json:"subject,omitempty"`
	Username      *string               `json:"username,omitempty"`
}

// NewDefaultSession instantiates a new DefaultSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultSession() *DefaultSession {
	this := DefaultSession{}
	return &this
}

// NewDefaultSessionWithDefaults instantiates a new DefaultSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultSessionWithDefaults() *DefaultSession {
	this := DefaultSession{}
	return &this
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *DefaultSession) GetExpiresAt() map[string]time.Time {
	if o == nil || o.ExpiresAt == nil {
		var ret map[string]time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultSession) GetExpiresAtOk() (*map[string]time.Time, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *DefaultSession) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given map[string]time.Time and assigns it to the ExpiresAt field.
func (o *DefaultSession) SetExpiresAt(v map[string]time.Time) {
	o.ExpiresAt = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *DefaultSession) GetHeaders() Headers {
	if o == nil || o.Headers == nil {
		var ret Headers
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultSession) GetHeadersOk() (*Headers, bool) {
	if o == nil || o.Headers == nil {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *DefaultSession) HasHeaders() bool {
	if o != nil && o.Headers != nil {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given Headers and assigns it to the Headers field.
func (o *DefaultSession) SetHeaders(v Headers) {
	o.Headers = &v
}

// GetIdTokenClaims returns the IdTokenClaims field value if set, zero value otherwise.
func (o *DefaultSession) GetIdTokenClaims() IDTokenClaims {
	if o == nil || o.IdTokenClaims == nil {
		var ret IDTokenClaims
		return ret
	}
	return *o.IdTokenClaims
}

// GetIdTokenClaimsOk returns a tuple with the IdTokenClaims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultSession) GetIdTokenClaimsOk() (*IDTokenClaims, bool) {
	if o == nil || o.IdTokenClaims == nil {
		return nil, false
	}
	return o.IdTokenClaims, true
}

// HasIdTokenClaims returns a boolean if a field has been set.
func (o *DefaultSession) HasIdTokenClaims() bool {
	if o != nil && o.IdTokenClaims != nil {
		return true
	}

	return false
}

// SetIdTokenClaims gets a reference to the given IDTokenClaims and assigns it to the IdTokenClaims field.
func (o *DefaultSession) SetIdTokenClaims(v IDTokenClaims) {
	o.IdTokenClaims = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *DefaultSession) GetSubject() string {
	if o == nil || o.Subject == nil {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultSession) GetSubjectOk() (*string, bool) {
	if o == nil || o.Subject == nil {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *DefaultSession) HasSubject() bool {
	if o != nil && o.Subject != nil {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *DefaultSession) SetSubject(v string) {
	o.Subject = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *DefaultSession) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultSession) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *DefaultSession) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *DefaultSession) SetUsername(v string) {
	o.Username = &v
}

func (o DefaultSession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpiresAt != nil {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if o.Headers != nil {
		toSerialize["headers"] = o.Headers
	}
	if o.IdTokenClaims != nil {
		toSerialize["id_token_claims"] = o.IdTokenClaims
	}
	if o.Subject != nil {
		toSerialize["subject"] = o.Subject
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableDefaultSession struct {
	value *DefaultSession
	isSet bool
}

func (v NullableDefaultSession) Get() *DefaultSession {
	return v.value
}

func (v *NullableDefaultSession) Set(val *DefaultSession) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultSession) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultSession(val *DefaultSession) *NullableDefaultSession {
	return &NullableDefaultSession{value: val, isSet: true}
}

func (v NullableDefaultSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
