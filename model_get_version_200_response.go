/*
Ory Hydra API

Documentation for all of Ory Hydra's APIs.

API version:
Contact: hi@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetVersion200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetVersion200Response{}

// GetVersion200Response struct for GetVersion200Response
type GetVersion200Response struct {
	// The version of Ory Hydra.
	Version *string `json:"version,omitempty"`
}

// NewGetVersion200Response instantiates a new GetVersion200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetVersion200Response() *GetVersion200Response {
	this := GetVersion200Response{}
	return &this
}

// NewGetVersion200ResponseWithDefaults instantiates a new GetVersion200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetVersion200ResponseWithDefaults() *GetVersion200Response {
	this := GetVersion200Response{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *GetVersion200Response) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetVersion200Response) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *GetVersion200Response) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *GetVersion200Response) SetVersion(v string) {
	o.Version = &v
}

func (o GetVersion200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetVersion200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableGetVersion200Response struct {
	value *GetVersion200Response
	isSet bool
}

func (v NullableGetVersion200Response) Get() *GetVersion200Response {
	return v.value
}

func (v *NullableGetVersion200Response) Set(val *GetVersion200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetVersion200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetVersion200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetVersion200Response(val *GetVersion200Response) *NullableGetVersion200Response {
	return &NullableGetVersion200Response{value: val, isSet: true}
}

func (v NullableGetVersion200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetVersion200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
